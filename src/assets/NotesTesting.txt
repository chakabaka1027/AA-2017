function showNode2(choice) { //first click
  audioService.playAudio("UIbuttonclick-option2.wav"); //button click sound
  vm.npcResponse = "";
  // Hide/show other choices
  vm.node1Hidden = true;
  vm.node2Hidden = false; //show if choice is clicked
  vm.node3Hidden = true;
  // Set dialog data for current node
  // vm.node1Response = choice; not used outside of this method

  codeNode2 = choice.code;
  // Shuffle choices
  var originalNodeTwo = dialogRoot.node2[codeNode2];
  vm.choice2 = originalNodeTwo; //data needed to pull up choices
  loadResponses(choice); // Responses with timers
  // Data
  var currenBranch = choice.code.charAt(0);


  trackBranches(currenBranch);


  userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_state", "1", mainInformationHandler.failedConvos[mainInformationHandler.currentConversation]);
  userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_user", currenBranch, choice.PC_Text);

  if (!vm.isTestBed) {
    userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_system", scores[currenBranch], randomChoices.indexOf(choice) + 1);
  }
  userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_NPC", choice.animation, choice.NPC_Response); //text_position
  randomChoices = shuffle(originalNodeTwo); //shuffle next choices
} //end of showNode2



function showNode3(choice) {
  audioService.playAudio("UIbuttonclick-option2.wav");
  // Hide/show neccessary items
  vm.node1Hidden = true;
  vm.node3Hidden = false; //show choice if clicked
  vm.node2Hidden = true;
  // vm.node2Response = choice;  not needed and not used ?
  var codeNode3 = choice.code;
  // Get choices for next round
  var originalNodeThree = dialogRoot.node3[codeNode3];
  vm.choice3 = originalNodeThree; //send them to the dom
  // Set animation information
  // mainInformationHandler.animationTitle = choice.animation;
  loadResponses(choice);
  // Data
  var currenBranch = choice.code.charAt(1);


//still needed only diff is 2 instead of 1
  trackBranches(currenBranch);


  userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_state", "2", mainInformationHandler.failedConvos[mainInformationHandler.currentConversation]);
  userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_user", currenBranch, choice.PC_Text);

  if (!vm.isTestBed) {
    userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_system", scores[currenBranch], randomChoices.indexOf(choice) + 1);
  }

  userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_NPC", choice.animation, choice.NPC_Response); //text_position
  randomChoices = shuffle(originalNodeThree); //shuffle them
} //end of showNode3

































function showNode(nodeType, choice){ //momentary for testing
  audioService.playAudio("UIbuttonclick-option2.wav");
  var codeNode = choice.code; //in both 2 and 3
  if(nodeType == 2){
    HideNodes(true,false,true );
    vm.npcResponse = "";
    var currenBranch = nodeAdjustmentsandreturnBranch(dialogRoot.node2[codeNode2],3,choice, 0);
    dataTracking(currenBranch, choice, 1);
  }
  else if (nodeType == 3){
    HideNodes(true,true, false );
    var currenBranch = nodeAdjustmentsandreturnBranch(dialogRoot.node3[codeNode3],3,choice, 1);
    dataTracking(currenBranch, choice, 2);
  }
  loadResponses(choice);
  trackBranches(currenBranch);

}

function nodeAdjustments(nodecContent, nodeType,choice ,choiceNumber){
var orignalNode = nodecContent;
if(num == 3){
    vm.choice3 = orignalNode;//change this to vm.node+1 and have it as an array ?
}else {
  vm.choice2 =orignalNode;
}
randomChoices = shuffle(orignalNode);

return  choice.code.charAt(choiceNumber);  }

function HideNodes(node1, node2, node3){
vm.node1Hidden = node1;              //maybe  I added this for now
vm.node2Hidden = node2;
vm.node3Hidden = node3; //show choice if clicked

}

function dataTracking(Branch, choice, number ){
        var num = number.toString();
        userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_state", num, mainInformationHandler.failedConvos[mainInformationHandler.currentConversation]);
        userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_user", Branch, choice.PC_Text);

        if (!vm.isTestBed) {
          userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_system", scores[Branch], randomChoices.indexOf(choice) + 1);
        }

        userDataService.trackAction(mainInformationHandler.levelCount, mainInformationHandler.roomKey, "convo_NPC", choice.animation, choice.NPC_Response); //text_position
}
